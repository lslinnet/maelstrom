#!/usr/bin/python
"""
Maelstrom - visualizing email contacts
Copyright(c) 2008-2009 Stefan Marsiske <my name at gmail.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

extracts a directed graph from the database.
  edges are the messages,
  nodes are the persons
  edges have a type to/cc and a weight (number of mails)
"""

import sys
import os
import getopt
import platform
if(platform.machine()=='i686'):
   import psyco

from lib.objects import Role
from lib.utils import Obj, UnicodeWriter, counter, CFG

# ID generators for nodes and eges
NodeIdGenerator = iter(counter(0))
EdgeIdGenerator = iter(counter(0))

def usage():
   """Prints out the --help"""
   print "usage: %s" % (sys.argv[0])
   print "\t-h                                  This Help"
   print "\t-s|--stats                          Display stats"
   print "\t-f |--format== [dot,log,csv,graphxml]   Output format."
   print "\t-f |--format== [dot,log,csv]        Output format."

class Node(Obj):
   """
   Simple graph node, that keeps track of the edges by
    - direction,
    - time and
    - type/timestamp
   """
   def __init__(self, name):
      self.__dict__['id'] = "n"+str(NodeIdGenerator.next())
      self.__dict__['name'] = name
      self.__dict__['srcTypeStamps'] = []
      self.__dict__['dstTypeStamps'] = []

   def __str__(self):
      return "%s\t(Sender:%d, Receiver:%d)\n" % (self.name,
                                       len(self.srcTypeStamps),
                                       len(self.dstTypeStamps))

   def incsrcweight(self, mode, date):
      """
      add an incomming edge to the node
      """
      self.__dict__['srcTypeStamps'].append((date, mode))

   def incdstweight(self, mode, date):
      """
      add an outgoing edge to the node
      """
      self.__dict__['dstTypeStamps'].append((date, mode))

class Edge(Obj):
   """
   Simple graph edge, that keeps track of the nodes by
    - type/timestamp
   """
   def __init__(self, sender, receiver):
      self.__dict__['id'] = "e"+str(EdgeIdGenerator.next())
      self.__dict__['sender'] = sender
      self.__dict__['to'] = receiver
      self.__dict__['typestamps'] = []

   def __str__(self):
      return "%s -> %s W:%d\n" % (self.sender,
                                  self.to,
                                  len(self.typestamps))
   def incweight(self, mode, date):
      """
      adjust the weight of the edge
      """
      self.__dict__['typestamps'].append((date, mode))

class Graph(Obj):
   """
   graph object: implements
    - building
    - exporting as dot,log,csv
    - gathering statistics
   """
   def __init__(self):
      self.__dict__['nodes'] = {}
      self.__dict__['edges'] = {}
      self.__dict__['nodemap'] = {}

   def __str__(self):
      return "Nodes: %s\nEdges: %s\n" % (self.nodes, self.edges)

   def getNode(self, name):
      res=None
      if(not name in self.nodes.keys()):
         res = Node(name)
         self.nodes[name] = res
         self.nodemap[name] = res.id
      else:
         res = self.nodes[name]
      return res

   def addedge(self, sender, mode, to, date):
      """adds an edge to the graph, creating non-existing nodes as
      necessary, adjusting weights at each object properly."""
      src = edge = dst = None
      # create nodes if not yet seen
      src=self.getNode(sender)
      dst=self.getNode(to)

      # create edge if a new one is found
      if(not (sender, to) in self.edges.keys()):
         edge = Edge(sender, to)
         self.edges[(sender, to)] = edge
      else:
         edge = self.edges[(sender, to)]

      # adjust weight on edge
      edge.incweight(mode, date)

      # adjust weight on nodes
      src.incsrcweight(mode, date)
      dst.incdstweight(mode, date)

   def stats(self):
      nodes = self.__dict__['nodes'].values()
      nodes.sort(lambda x, y: cmp(len(y.srcTypeStamps)+len(y.dstTypeStamps),
                                 len(x.srcTypeStamps)+len(x.dstTypeStamps)))
      print "Top Overall\n", nodes[:10]

      # print out top senders
      nodes = self.__dict__['nodes'].values()
      nodes.sort(lambda x, y: cmp(len(y.srcTypeStamps),
                                 len(x.srcTypeStamps)))
      print "Top Senders\n", nodes[:10]

      # print out top recipients
      nodes = self.__dict__['nodes'].values()
      nodes.sort(lambda x, y: cmp(len(y.dstTypeStamps),
                                 len(x.dstTypeStamps)))
      print "Top Receivers\n", nodes[:10]

      # print out top edges
      edges = self.__dict__['edges'].values()
      edges.sort(lambda x, y: cmp(len(y.typestamps), len(x.typestamps)))
      print "Top Overall edges\n", edges[:10]

      if(CFG.get('maelstrom','egg')):
         edges = filter(lambda x: (
            x.sender!=CFG.get('maelstrom','egger')), edges)
         edges.sort(lambda x, y: cmp(len(y.typestamps), len(x.typestamps)))
         print "Top Overall eggs\n", edges[:10]

   def dot(self):
      """
      outputs the graph in graphviz dot language
      """
      result = "digraph G {\noverlap = false;\nsplines=true;\n"
      result += reduce(lambda y, x: y+'%s [ label="%s"];\n' %
                     (self.nodes[x.name].id, x.name),
                     self.nodes.values(),"")
      result += reduce(lambda y, x: y+'"%s" -> "%s" [ weight="%d" ];\n' %
                     (self.nodes[x.sender].id,
                      self.nodes[x.to].id,
                      len(x.typestamps)),
                     self.edges.values(),"")
      result += "}"
      return result

   def getEdges(self,name,dir=3):
      """ returns a list of edges related to the node designated by
      name. Dir is a bitmask, bit1 incomming, bit2 outgoing,
      default=3 both directions"""

      return filter(lambda x:
                    ((dir & 1) and x.to==name) or
                    ((dir & 2) and x.sender==name),
                    self.edges.values())

class PersonMap:
   """
   maps names or email addresses to other names specified in a configure
   """
   def __init__(self, fname):
      self.__dict__['personmap'] = {}
      if(os.path.exists(fname)):
         fp = open(fname,'r')
         while(fp):
            line = fp.readline()
            if not line:
               break
            (email, name) = line.split(" ", 1)
            self.__dict__['personmap'][email] = name.strip()
         fp.close()

   def __getitem__(self, name):
      if(name and self.__dict__['personmap'].has_key(name)):
         return self.__dict__['personmap'][name]
      else:
         return name

def init():
   """
   initializes the configuration from the config files, then sets the
   command line parameters and finally passes control to the main
   processing function
   """
   try:
      opts, args = getopt.gnu_getopt(
         sys.argv[1:], "hesf:d:",
         ["help", "egg", "stats", "format=", "database="])
   except getopt.GetoptError:
      usage()
      sys.exit(2)
   for o, a in opts:
      if o in ("-h", "--help"):
         usage()
         sys.exit()
      elif o in ("-d", "--database"):
         if(a and os.path.isfile(a)):
            CFG.set('maelstrom', 'database', os.path.abspath(a))
      elif o in ("-e", "--egg"):
         CFG.set('maelstrom', 'egg', False)
      elif o in ("-s", "--stats"):
         CFG.set('maelstrom', 'stats', True)
      elif o in ("-f", "--format"):
         if(a and a in ("dot", "log", "graphxml", "csv")):
            CFG.set('maelstrom', 'format', a)
         else:
            usage()
            sys.exit()

def process():
   graph = Graph()
   personmap = PersonMap(
      os.path.abspath(CFG.get('maelstrom','personmapfile')))
   csvcoder = None
   if(CFG.get('maelstrom','format') == "csv"):
      csvcoder = UnicodeWriter(sys.stdout)

   q = Role.select()
   for edge in q:
      # try to get the names of the participants
      try:
         sender = personmap[edge.msg.sender.getname()]
      except AttributeError:
         continue
      try:
         receiver = personmap[edge.email.getname()]
      except AttributeError:
         continue
      # add edge to graph
      graph.addedge(sender,
                    edge.header.name,
                    receiver,
                    edge.msg.delivered)

      # print out edge in log/csv format if necessary
      if(CFG.get('maelstrom','format') == "log"):
         print edge.msg.delivered, sender, edge.header.name, receiver
      elif(CFG.get('maelstrom','format') == "csv"):
         csvcoder.writerow(map(lambda x: str(x),
                               (edge.msg.delivered,
                                sender,
                                edge.header.name,
                                receiver)))
   print graph.getEdges(CFG.get('maelstrom','testuser'))
   #print graph
   if(CFG.get('maelstrom','format') == "dot"):
      print graph.dot()
   if(CFG.get('maelstrom','stats')):
      print graph.stats()

if __name__ == '__main__':
   if(platform.machine()=='i686'):
      psyco.full()
   # init the app
   init()
   # call the main routine for processing the data
   process()
   sys.exit(0)
